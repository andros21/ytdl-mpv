#!/usr/bin/env bash

# *--------------------------------------------*
# | YTDL-MPV                                   |
# |                                            |
# | Browse and play YouTube contents from rofi |
# | using youtube-dl and mpv                   |
# |                                            |
# | Authors: Andrea Rossoni                    |
# | License: GPLv3                             |
# *--------------------------------------------*


# Default functions
_rofi() {
   rofi -dmenu -no-auto-select -i -width "${WIDTH}" -l "${LINE}" -p 'ytdl-mpv > ' "$@"
}
_rofi_slim() {
   rofi -dmenu -no-auto-select -i -width 50 -l 13 -p 'ytdl-mpv > ' "$@"
}
_rofi_help() {
   rofi -dmenu -no-auto-select -i -width 30 -l 5 -p 'ytdl-mpv > ' "$@"
}
_rofi_error() {
   rofi -e "$1"
}
_copyId() {
   if [ "$XCLIP" ]; then
      printf '%s' "$1" | xclip -i -selection "clipboard"
      printf '[Info] Copy in clipboard ... %s\n' "${1:7}"
   fi
}
_ytdl_mpvctl() {
   mpvctl --socket "${SOCKET}" "$@"
}
_playAudio() {
   mpv --no-terminal --input-ipc-server="${SOCKET}" --ytdl-format=bestaudio "$1" &> /dev/null &
   printf '[Info] Audio playback ... %s\n' "${1:7}"
}
_playVideo() {
   mpv --input-ipc-server="$SOCKET" \
       --ytdl-format="bestvideo[height<=?720][fps<=?30][vcodec!=?vp9]+bestaudio/best" "$1" &> /dev/null &
   printf '[Info] Video playback ... %s\n' "${1:7}"
}
_appendTrack() {
   if _ytdl_mpvctl add "$1"; then
      printf '[Info] Add track to cur playlist ... %s\n' "${1:7}"
   fi
}
_savePlaylist() {
   if _ytdl_mpvctl save "$1"; then
      printf '[Info] Current playlist saved to ... %s\n' "$1"
   fi
}
_loadPlaylist() {
   if _ytdl_mpvctl load "$1"; then
      printf '[Info] Playlist loaded from ... %s\n' "$1"
   fi
}
_flushCache() {
   if rm -fr "$CACHEDIR"; then
      printf '[Info] ytdl-mpv cache flushed\n'
   fi
}
_flushHist() {
   if rm -fr "$HISTORY"; then
      printf '[Info] ytdl-mpv search history flushed\n'
   fi
}
_helpPlay() {
   cat << EOF | _rofi_help -mesg "--  play menu key bindings  --"
[Enter] | Default action
[${play_audio}] | Start audio playback
[${play_video}] | Start video playback
[${copy_id}] | Copy video id
EOF
}
_helpSearch() {
   cat << EOF | _rofi_help -mesg "-- search menu key bindings --"
[Enter] | Search item
[${re_cache}] | Recache item
EOF
}
_helpEdit() {
   cat << EOF | _rofi_help -mesg "--  edit menu key bindings  --"
[Enter] | Play playlist item
[${remove_track}] | Remove playlist item
EOF
}

# Default keybindings
copy_id="Alt+c"
default_do='_playAudio'
play_audio="Alt+a"
play_video="Alt+v"
re_cache="Alt+r"
remove_track="Alt+r"
key_help="Alt+h"

# Default envs
CACHEDIR=$HOME/.cache/ytdl-mpv
DB=$CACHEDIR/ytdl-mpv.sqlite3
DELAY=0.3
HISTORY=$HOME/.ytdl-mpv.history
LINE=16
NUMBER=20
PLAYDIR=$HOME/.local/share/ytdl-mpv
SOCKET=/tmp/ytdl-mpv.sock
WIDTH=70
XCLIP=1

# Ensure dependencies
_checkDep() {
   local deps
   deps=(mpv mpvctl nc rofi sqlite3 youtube-dl xargs xclip)
   for dep in "${deps[@]}"; do
      type "$dep" > /dev/null 2>&1 || {
         if [ "$dep" == "xclip" ]; then
            XCLIP=0
         else
            local err_msg="[Error] Cannot find ${dep} in your \$PATH"
            _rofi_error "$err_msg"
            printf '%s\n' "$err_msg" >&2
            exit 1;
         fi
      }
   done
}

# Ensure internet connection is on
_checkCon() {
   if ! ping -c1 youtube.com &> /dev/null; then
      local err_msg="[Error] Unable to ping youtube.com, check your connection"
      _rofi_error "$err_msg"
      printf '%s\n' "$err_msg" >&2
      exit 1;
   fi
}

# Usage (help) message
_usage() {
    cat >&2 << EOF
usage: $(basename "$0") [-h] [--number NUMBER] [--line LINE] [--socket SOCKET] [--width WIDTH]

YTDL-MPV - Browse and play yt contents from rofi using ytdl and mpv

optional arguments:
  -h, --help            show this help message and exit
  -n, --number NUMBER   search results number [default ${NUMBER}]
  -l, --line LINE       number of rofi vertical line [default ${LINE}]
  -s, --socket SOCKET   mpv socket path [default ${SOCKET}]
  -w, --width WIDTH     rofi width [default ${WIDTH}]
EOF
}

# Cat ytdl-mpv main menu
_getMainMenu() {
   cat << EOF
< Exit
aa) [ Add/play to cur playlist ] >
ep) [ Edit cur playlist ] >
fc) [ Flush cache dir ] >
fh) [ Flush search history ] >
ld) [ Load a saved playlist ] >
lp) [ Loop/unloop cur playlist ] >
nx) [ Play next track in playlist ] >
pc) [ Playlist clear ] >
pp) [ Toggle play/pause ] >
pv) [ Play prev track in playlist ] >
sp) [ Stop playback ] >
sv) [ Save current playlist ] >
EOF
}

# Hash a string and encode it
_hashStr() {
   local hash
   hash=$(printf '%s' "$1" | sha256sum | base64)
   printf '%s' "${hash::19}"
}

# Format and numbering plain file
_getView() {
   if [ -f "$1" ]; then
      printf '< Return\n%s' "$(awk '{ print FNR ") " $0 }' < "$1" | sed 's/\<[0-9]\>/0&/')"
   elif [ -d "$1" ]; then
      printf '< Return\n%s' "$(find "$1" -type f -name '*' -exec basename -a -- {} + \
         | sort | awk '{ print FNR ") " $0 }' | sed 's/\<[0-9]\>/0&/')"
   else
      return
   fi
}

# Check if a query was cached inside a table
_isCachedQuery() {
   local query
   query="$1"
   if [ -f "$DB" ]; then
      local count
      count="$(sqlite3 "${DB}" \
         "select count(*) from main where query='${query}'" 2> /dev/null)"
      if [[ "$count" -gt 0 ]]; then printf "cached"; fi
   fi
}

# Get a query that was cached inside main table
# and stdout it formatted for rofi
_getCachedQuery() {
   local query
   query="$1"
   printf '< Return\n%s' "$(sqlite3 "${DB}" \
      "select title from main where query='${query}'" 2> /dev/null \
      | awk '{ print FNR ") " $0 }' | sed 's/\<[0-9]\>/0&/')"
}

# Get id of yt content from cached table
_getCachedIdQuery() {
   local query
   local title
   query="$1"
   title="$2"
   # escape quotes
   title=$(printf '%s' "$title" | sed "s/'/''/g")
   printf '%s' "$(sqlite3 "${DB}" \
      "select id from main where query='${query}' and title='${title}'" 2> /dev/null)"
}

# Cache a query inside main table
_cacheQuery() {
   local query
   query="$1"
   # create main table and cache items
   sqlite3 "${DB}" "create table if not exists main (query str, id str, title str)"
   sed "s/;//g" "$CACHEDIR/$query" | sed -E "N;s/(.*)\n(.*)/${query};\2;\1/" \
      | sqlite3 -separator ';' "${DB}" ".import /dev/stdin main" 2> /dev/null
}

# Delete a cached query inside main table
_deleteQuery() {
   local query
   query="$1"
   sqlite3 "${DB}" "delete from main where query='${query}'" 2> /dev/null
}

# ytdl-mpv main interactive menu
_mainMenu() {
   local action
   action="$(_getMainMenu | _rofi_slim -mesg "-- main menu: select an action --" \
      | awk '{$1=tolower($1);print $1}')"
   action="${action::2}"
   case "$action" in
      aa)  _searchMenu;;
      ep)  _editMenu;;
      fc)  _flushCache;;
      fh)  _flushHist;;
      ld)  _loadMenu;;
      lp)  _ytdl_mpvctl loop;;
      nx)  _ytdl_mpvctl next;;
      pc)  _ytdl_mpvctl clear;;
      pp)  _ytdl_mpvctl toggle;;
      pv)  _ytdl_mpvctl prev;;
      sp)  _ytdl_mpvctl stop;;
      sv)  _saveMenu;;
      \<)  printf '[Info] Quitting\n'; exit 0;;
      *)   printf '[Info] Nothing selected\n'; exit 0;;
   esac
}

# Edit menu,
# display playlist state, possible actions remove or select a track from playlist
_editMenu() {
      local args
      args=( -mesg "-- loop [$(_ytdl_mpvctl loop-status)] -- edit menu: edit playlist, help [Alt+h] --"
             -kb-custom-1 "${remove_track}"
             -kb-custom-4 "${key_help}" )
      # get current playlist
      local pl
      pl="$(_ytdl_mpvctl playlist "${DB}")"
      # selected track
      local rofi_exit
      str="$(printf '< Return\n%s' "${pl}" | _rofi "${args[@]}")"
      rofi_exit="$?"
      # check if help requested
      if [[ "${rofi_exit}" -eq 13 ]];
         then _helpEdit; _editMenu;
      else
         if [ -z "$str" ]; then
            printf '[Info] Nothing selected\n'
            exit 0
         elif [ "${str::1}" == "<" ]; then
            printf '[Info] Back to search menu\n'
            _mainMenu;
         else
            local stn
            # get track number
            stn="$(printf '%s' "${str::2}" | sed 's/^0*//')"
            case "${rofi_exit}" in
               0)  _ytdl_mpvctl track "$((stn-1))";;
               10) _ytdl_mpvctl rm "$((stn-1))";;
            esac
            # recursive until explicit exit
            sleep $DELAY; _editMenu
         fi
      fi
}

# Save menu,
# save the current playlist as text file
_saveMenu() {
   mkdir -p "$PLAYDIR"
   # saved playlists
   local saved
   saved="$(_getView "${PLAYDIR}" \
      | _rofi_slim -mesg "-- save menu: save current playlist as --" \
      | xargs | tr '[:upper:]' '[:lower:]')"
   if [ -z "$saved" ]; then
      printf '[Info] Nothing selected or searched\n'
      exit 0;
   elif [ "${saved::1}" == "<" ]; then
      printf '[Info] Back to main menu\n'
      _mainMenu;
   else
      # slice only selected items and not typed items
      if [[ $saved =~ ^[0-9][0-9]\)\ (.*)$ ]]; then saved="${saved:4}"; fi;
      _savePlaylist "$PLAYDIR/$saved"
   fi
}

# Load menu,
# load a playlist from text file, only audio playback
_loadMenu() {
   # saved playlists
   local saved
   saved="$(_getView "${PLAYDIR}" \
      | _rofi_slim -mesg "-- load menu: load playlist for audio playback --" \
      | xargs | tr '[:upper:]' '[:lower:]')"
   if [ -z "$saved" ]; then
      printf '[Info] Nothing selected or searched\n'
      exit 0;
   elif [ "${saved::1}" == "<" ]; then
      printf '[Info] Back to main menu\n'
      _mainMenu;
   else
      # slice only selected items and not typed items
      if [[ $saved =~ ^[0-9][0-9]\)\ (.*)$ ]]; then saved="${saved:4}"; fi;
      # check if ytdl socket is idle, if yes append instead play
      if [ "$(_ytdl_mpvctl check)" == "disabled" ]; then
         # check if playlist file exist
         if [ ! -f "$PLAYDIR/$saved" ]; then
            local err_msg="[Error] Invalid path given"
            _rofi_error "$err_msg"
            printf '%s\n' "$err_msg" >&2
            exit 1;
         fi
         # selected track is the first one of the playlist
         _playAudio "$(head -n1 "$PLAYDIR/$saved")"; sleep $DELAY;
         # append remaining tracks
         local rtracks
         rtracks="$(tail -n $(( $(wc -l "$PLAYDIR/$saved" | awk '{print $1}') - 1 )) "$PLAYDIR/$saved")"
         for rtrack in $rtracks; do
            _appendTrack "$rtrack"
         done
      else
         _loadPlaylist "$PLAYDIR/$saved";
      fi
   fi
}

# Search menu,
# select keywords from history, start a search
_searchMenu() {
   local args
   args=( -mesg "-- search menu: search something, help [Alt+h] --"
          -kb-custom-1 "${re_cache}"
          -kb-custom-4 "${key_help}" )
   if [ -n "$HISTORY" ]; then touch "$HISTORY"; fi;
   # select from history or type something
   local rofi_exit
   search="$(_getView "$HISTORY" | _rofi_slim "${args[@]}")"
   rofi_exit="$?"
   # check if help requested
   if [[ "${rofi_exit}" -eq 13 ]];
      then _helpSearch; _searchMenu;
   else
      # check if this search must be recached
      if [ "${rofi_exit}" -eq 10 ]; then to_recache=1; else to_recache=0; fi
      # trim white spaces and lower case
      search="$(printf '%s' "$search" | xargs -0 | tr '[:upper:]' '[:lower:]')"
      if [ -z "$search" ]; then
         printf '[Info] Nothing selected or searched\n'
         exit 0;
      elif [ "${search::1}" == "<" ]; then
         printf '[Info] Back to main menu\n'
         _mainMenu;
      else
         # slice only selected items and not typed items
         if [[ $search =~ ^[0-9][0-9]\)\ (.*)$ ]]; then search="${search:4}"; fi;
         # remove trailing spaces
         printf '%s\n' "$search" | sed 's/[ \t]*$//' >> "$HISTORY"
         # unique and sorted entries inside history
         local new_hist
         new_hist="$(sort -u "$HISTORY")"
         printf '%s\n' "$new_hist" > "$HISTORY"
         printf '[Info] Searching for ... %s\n' "${search}"
         _startPlay
      fi
   fi
}

# Start ytdl search using keywords, and then start/append to playback
_startPlay() {
   # youtube-dl search
   local query
   query="$(_hashStr "${search}:${NUMBER}")"
   mkdir -p "$CACHEDIR"
   # if not cached or marked as to_recache
   # search it and cache it
   local cache
   cache="$(_isCachedQuery "$query")"
   if [ -z "$cache" ] || [ "$to_recache" -eq 1 ]; then
      if [ "$to_recache" -eq 1 ]; then _deleteQuery "$query"; fi
      youtube-dl --default-search \
         ytsearch"$NUMBER" "$search" --get-id --get-title \
         2> /dev/null > "$CACHEDIR/$query" &
      wait "$!"; youtube_dl_exit="$?"
      if [ ! "$youtube_dl_exit" -eq 0 ]; then
         local err_msg="[Error] youtube-dl search fail, exit code ${youtube_dl_exit}"
         _rofi_error "$err_msg"
         printf '%s\n' "$err_msg" >&2
         exit 1
      fi
      _cacheQuery "$query" 2> /dev/null
      rm -f "$CACHEDIR/$query"
   fi
   # check if ytdl-mpv is already running, if yes append track to playlist
   local args
   if [ "$(_ytdl_mpvctl check)" == "disabled" ]; then
      args=( -mesg "-- play menu: start audio or video playback, help [Alt+h] --"
             -kb-custom-1 "${play_audio}"
             -kb-custom-2 "${play_video}"
             -kb-custom-3 "${copy_id}"
             -kb-custom-4 "${key_help}" )
   else
      args=( -mesg "-- play menu: add track to current playlist, simply [Enter] --" )
   fi
   # selected track
   local strack
   local rofi_exit
   strack="$(_getCachedQuery "$query" | _rofi "${args[@]}")"
   rofi_exit="$?"
   # check if help requested
   if [[ "${rofi_exit}" -eq 13 ]];
      then _helpPlay; _startPlay;
   else
      if [ -z "$strack" ]; then
         printf '[Info] Nothing selected\n'
         exit 0
      elif [ "${strack::1}" == "<" ]; then
         printf '[Info] Back to search menu\n'
         _searchMenu;
      else
         strack="${strack:4}"
         local id
         id="ytdl://$(_getCachedIdQuery "$query" "$strack")"
         # check if ytdl socket is idle, if yes append instead play
         if [ "$(_ytdl_mpvctl check)" == "disabled" ]; then
            case "${rofi_exit}" in
               0) "${default_do}" "$id";;
               10)     _playAudio "$id";;
               11)     _playVideo "$id";;
               12)        _copyId "$id";;
            esac
         else
            _appendTrack "$id";
         fi
         # recursive until explicit exit
         sleep $DELAY; _startPlay
      fi
   fi
}


# Parse optional argument
while :; do
    case "$1" in
        -n|--number)   shift; [ -n "$1" ] && [[ $1 =~ ^[0-9]+$ ]] && NUMBER="$1";;
        -l|--line)     shift; [ -n "$1" ] && [[ $1 =~ ^[0-9]+$ ]] && LINE="$1";;
        -h|--help)     shift; _usage; exit 0;;
        -s|--socket)   shift; [ -n "$1" ] && SOCKET="$1";;
        -w|--width)    shift; [ -n "$1" ] && [[ $1 =~ ^[0-9]+$ ]] && WIDTH="$1";;
        *)             break;;
    esac
    shift
done

_checkDep   # Run deps test
_checkCon   # Run conn test
_mainMenu   # Run main menu
