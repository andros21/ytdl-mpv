#!/usr/bin/env bash

# -------------------------------------------
# YTDL-MPV.SH
#
# Browse and play YouTube contents from rofi
# using youtube-dl and mpv
#
# -------------------------------------------
# Author: Andrea Rossoni
#   Date: 25-03-2021
# -------------------------------------------
#

# Default settings
_rofi () {
   rofi -dmenu -no-auto-select -i -width ${WIDTH} -l ${LINE} -p 'ytdl-mpv > ' "$@"
}
_rofi_slim () {
   rofi -dmenu -no-auto-select -i -width 50 -l ${LINE} -p 'ytdl-mpv > ' "$@"
}
_copyId() {
   printf '%s' "$1" | xclip -i -selection "clipboard";
   printf '[Info] Copy in clipboard ... %s\n' "${1:7}"
}
_ytdl_mpvctl() {
   mpvctl --socket $SOCKET $@;
}
_playAudio() {
   mpv --no-terminal --input-ipc-server=$SOCKET --ytdl-format=bestaudio "$1" &> /dev/null &
   printf '[Info] Audio playback ... %s\n' "${1:7}"
}
_playVideo() {
   mpv --input-ipc-server=$SOCKET \
       --ytdl-format="bestvideo[height<=?720][fps<=?30][vcodec!=?vp9]+bestaudio/best" "$1" &> /dev/null &
   printf '[Info] Video playback ... %s\n' "${1:7}"
}
_appendTrack() {
   _ytdl_mpvctl add "$1";
   if [ $? -eq 0 ]; then printf '[Info] Add track to cur playlist ... %s\n' "${1:7}"; fi;
}
_removeTrack() {
   _ytdl_mpvctl rm $1;
   if [ $? -eq 0 ]; then printf '[Info] Track removed from cur playlist ... %s\n' "$2"; fi;
}
_savePlaylist() {
   _ytdl_mpvctl save $1;
   if [ $? -eq 0 ]; then printf '[Info] Current playlist saved to ... %s\n' "$1"; fi;
}
_loadPlaylist() {
   _ytdl_mpvctl load $1;
   if [ $? -eq 0 ]; then printf '[Info] Playlist loaded from ... %s\n' "$1"; fi;
}
_flushCache() {
   rm -fr $CACHEDIR
   if [ $? -eq 0 ]; then printf '[Info] ytdl-mpv cache flushed\n'; fi;
}
_flushHist() {
   rm -fr $HISTORY
   if [ $? -eq 0 ]; then printf '[Info] ytdl-mpv search history flushed\n'; fi;
}

# Default keybindings
default_do='_playAudio'
play_audio="Alt+a"
play_video="Alt+v"
remove_track="Alt+r"
copy_id="Alt+c"

# Default envs
HISTORY=$HOME/.ytdl-mpv.history
CACHEDIR=$HOME/.cache/ytdl-mpv
GCP=$CACHEDIR/$(printf 'playlist\n' | base64)
PLAYDIR=$HOME/.local/share/ytdl-mpv

# Ensure dependencies
_checkDep() {
   local deps=(mpv mpvctl rofi youtube-dl xclip)
   for dep in $deps; do
      type $dep > /dev/null 2>&1 || {
         printf '%s\n' "[Error] Cannot find $dep on your \$PATH" >&2
         exit 1;
      }
   done
}

# Ensure that argparse.sh script was downloaded
_downloadArgparse() {
   cd "$(dirname "${BASH_SOURCE}")";
   if [ ! -f argparse.bash ]
   then
      printf '[Info] argparse.sh not found, downloading it ... '
      curl -sJSOL "https://raw.githubusercontent.com/nhoffman/argparse-bash/master/argparse.bash"
      if [ $? -eq 0 ]
      then
         printf 'done\n\n'
      else
         printf '\n[Error] argparse.sh not dowloaded\n\n'
         exit 1
      fi
   fi
}

# Setup argparse.sh
ARGPARSE_DESCRIPTION="YTDL-MPV - Browse and play yt contents from rofi using ytdl and mpv"
_checkDep
_downloadArgparse
source argparse.bash || exit 1
argparse "$@" <<EOF || exit 1
parser.add_argument('--number', default=20, type=int,
                    help='search results number [default %(default)s]')
parser.add_argument('--line', default=15, type=int,
                    help='number of rofi vertical line [default %(default)s]')
parser.add_argument('--socket', default='/tmp/ytdl-mpv.sock', type=str,
                    help='mpv socket path [default %(default)s]')
parser.add_argument('--width', default=70, type=int,
                    help='rofi width [default %(default)s]')
EOF

# cat ytdl-mpv main menu
_getMainMenu() {
   cat << EOF
< Exit
aa) [ Add/play to cur playlist ] >
ep) [ Edit cur playlist ] >
fc) [ Flush cache dir ] >
fh) [ Flush search history ] >
ld) [ Load a saved playlist ] >
lp) [ Loop/unloop cur playlist ] >
nx) [ Play next track in playlist ] >
pc) [ Playlist clear ] >
pp) [ Toggle play/pause ] >
pv) [ Play previous track in playlist ] >
sp) [ Stop playback ] >
sv) [ Save current playlist ] >
EOF
}

# format and numbering plain file
_getView() {
   if [ -f $1 ]; then
      printf '< Return\n%s' "$(cat $1 | awk '{ print FNR ") " $0 }' | sed 's/\<[0-9]\>/0&/')"
   elif [ -d $1 ]; then
      printf '< Return\n%s' "$(ls -1 $1 | awk '{ print FNR ") " $0 }' | sed 's/\<[0-9]\>/0&/')"
   else
      continue
   fi
}

# format and numbering zip-encode64 file
_getZipView() {
   printf '< Return\n%s' "$(cat $1 | gzip -dq | base64 -d | awk '{ print FNR ") " $0 }' \
      | sed 's/\<[0-9]\>/0&/')"
}

# ytdl-mpv main interactive menu
_mainMenu() {
   local action=$(_getMainMenu | _rofi_slim -mesg "-- main menu, select an action --" \
      | awk '{$1=tolower($1);print $1}')
   action=${action::2}
   case $action in
      aa)  _searchMenu;;
      ep)  _editMenu;;
      fc)  _flushCache;;
      fh)  _flushHist;;
      ld)  _loadMenu;;
      lp)  _ytdl_mpvctl loop;;
      nx)  _ytdl_mpvctl next;;
      pc)  _ytdl_mpvctl clear;;
      pp)  _ytdl_mpvctl toggle;;
      pv)  _ytdl_mpvctl prev;;
      sp)  _ytdl_mpvctl stop;;
      sv)  _saveMenu;;
      \<)  printf '[Info] Quitting\n'; exit 0;;
      *)   printf '[Info] Nothing selected\n'; exit 0;;
   esac
}

# Edit menu,
# display playlist state, possible actions remove or select a track from playlist
_editMenu() {
      local args=( -mesg "Loop: $(_ytdl_mpvctl loop-status) -- [Enter] to play a track, [Alt+r] to remove a track --" -kb-custom-1 "${remove_track}" )
      # get current playlist
      local pl=$(_ytdl_mpvctl playlist $GCP)
      # selected track
      str=$(printf '< Return\n%s' "$pl" | _rofi "${args[@]}")
      local rofi_exit=$?
      # selected track id
      local sid=$(printf '%s\n' "$str" | awk '{print $2}')
      if [ -z "$str" ]; then
         printf '[Info] Nothing selected\n'
         exit 0
      elif [ "${str::1}" == "<" ]; then
         printf '[Info] Back to search menu\n'
         _mainMenu;
      else
         # select only track number removing leading zero
         local stn=$(printf '%s\n' "${str::2}" | sed 's/^0*//')
         if [ -z $stn ]; then stn="0"; fi;
         case "${rofi_exit}" in
            0)  _ytdl_mpvctl track $stn;;
            10) _removeTrack $stn $sid;;
         esac
         # recursive until explicit exit
         _editMenu
      fi
}

# Save menu,
# save the current playlist as text file
_saveMenu() {
   mkdir -p "$PLAYDIR"
   # saved playlists
   local saved=$( _getView $PLAYDIR \
      | _rofi_slim -mesg "-- Save the current playlist as --" \
      | xargs | tr '[:upper:]' '[:lower:]')
   if [ -z "$saved" ]; then
      printf '[Info] Nothing selected or searched\n'
      exit 0;
   elif [ "${saved::1}" == "<" ]; then
      printf '[Info] Back to main menu\n'
      _mainMenu;
   else
      # slice only selected items and not typed items
      if [[ $saved =~ ^[0-9][0-9]\)\ (.*)$ ]]; then saved=${saved:4}; fi;
      _savePlaylist $PLAYDIR/$saved
   fi
}

# Load menu,
# load a playlist from text file, only audio playback
_loadMenu() {
   # saved playlists
   local saved=$( _getView $PLAYDIR \
      | _rofi_slim -mesg "-- Load a save playlist for audio playback --" \
      | xargs | tr '[:upper:]' '[:lower:]')
   if [ -z "$saved" ]; then
      printf '[Info] Nothing selected or searched\n'
      exit 0;
   elif [ "${saved::1}" == "<" ]; then
      printf '[Info] Back to main menu\n'
      _mainMenu;
   else
      # slice only selected items and not typed items
      if [[ $saved =~ ^[0-9][0-9]\)\ (.*)$ ]]; then saved=${saved:4}; fi;
      # check if ytdl socket is idle, if yes append instead play
      if [ $(_ytdl_mpvctl check) == "disabled" ]; then
         # check if playlist file exist
         if [ ! -f $PLAYDIR/$saved ]; then
            printf '[Error] [Error] Invalid path given\n' >&2
            exit 1;
         fi
         # selected track is the first one of the playlist
         _playAudio $(head -n1 "$PLAYDIR/$saved"); sleep 3;
         # append remaining tracks
         for rtrack in $(tail -n $(( $(wc -l $PLAYDIR/$saved | awk '{print $1}') - 1 )) $PLAYDIR/$saved); do
            _appendTrack $rtrack
         done
      else
         _loadPlaylist $PLAYDIR/$saved;
      fi
   fi
}

# Search menu,
# select keywords from history, start a search
_searchMenu() {
   if [ ! -z "$HISTORY" ]; then touch "$HISTORY"; fi;
   # select from history or type something,
   # trim whitespaces and lower case
   search=$( _getView $HISTORY | _rofi_slim -mesg "-- Search something or select from yt history --" \
      | xargs -0 | tr '[:upper:]' '[:lower:]')
   if [ -z "$search" ]; then
      printf '[Info] Nothing selected or searched\n'
      exit 0;
   elif [ "${search::1}" == "<" ]; then
      printf '[Info] Back to main menu\n'
      _mainMenu;
   else
      # slice only selected items and not typed items
      if [[ $search =~ ^[0-9][0-9]\)\ (.*)$ ]]; then search=${search:4}; fi;
      printf '%s\n' "$search" >> "$HISTORY"
      # unique and sorted entries inside history
      local new_hist=$(sort -u $HISTORY)
      printf '%s\n' "$new_hist" > "$HISTORY"
      printf '[Info] Searching for ... %s\n' "${search}"
      _startPlay
   fi
}

# Start ytdl search using keywords, and then start/append to playback
_startPlay() {
   # youtube-dl search
   local out=$(printf '%s\n' "$search:$NUMBER" | base64)
   mkdir -p "$CACHEDIR"
   # if not cached, search it
   if [ ! -f "$CACHEDIR/$out" ]; then
      youtube-dl "ytsearch$NUMBER:$search" --get-id --get-title \
         | sed -E 'N;s|(.*)\n(.*)|\2 \| \1|' | base64 | gzip -1q > "$CACHEDIR/$out" 2> /dev/null &
      wait $!; youtube_dl_exit=$?
      if [ "$youtube_dl_exit" != "0" ]; then
         printf '[Error] youtube-dl search fail, exit code %s returned\n' "$youtube_dl_exit" >&2
         exit 1
      fi
      # create a global search unique cache file
      if [ -f $GCP ]; then local ogc=$(cat $GCP | gzip -dq | base64 -d); fi
      printf '%s\n%s\n' "$ogc" "$(cat $CACHEDIR/$out | gzip -dq | base64 -d)" \
         | sort -u | base64 | gzip -1q > $GCP
   fi
   # check if ytdl-mpv is already running, if yes append track to playlist
   if [ $(_ytdl_mpvctl check) == "disabled" ]; then
      local args=( -mesg "-- [Alt+a] start audio playback, [Alt+v] start video playback --"
                   -kb-custom-1 "${play_audio}"
                   -kb-custom-2 "${play_video}"
                   -kb-custom-3 "${copy_id}" )
   else
      local args=( -mesg "-- Add a track to the current playlist, simply [Enter] --" )
   fi
   # selected track
   strack=$(_getZipView "$CACHEDIR/$out" | _rofi "${args[@]}")
   local rofi_exit=$?
   if [ -z "$strack" ]; then
      printf '[Info] Nothing selected\n'
      exit 0
   elif [ "${strack::1}" == "<" ]; then
      printf '[Info] Back to search menu\n'
      _searchMenu;
   else
      strack=${strack:4}
      local id="ytdl://$(printf '%s' "$strack" | awk {'print $1'})"
      # check if ytdl socket is idle, if yes append instead play
      if [ $(_ytdl_mpvctl check) == "disabled" ]; then
         case "${rofi_exit}" in
            0) ${default_do} $id;;
            10)   _playAudio $id;;
            11)   _playVideo $id;;
            12)      _copyId $id;;
         esac
      else
         _appendTrack $id;
      fi
      # recursive until explicit exit
      sleep 1; _startPlay
   fi
}

# Run main menu
_mainMenu
